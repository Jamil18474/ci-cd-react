# Documentation for GitHub Actions Workflow: Build, Test and Deploy React Application

# Workflow Name: Build, Test and Deploy React Application

# Controls when the action will run.
on:
  # This triggers the workflow on push or pull request events, but only for the 'master' branch.
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # Job to build, test, and prepare the React application
  build_test:
    # Specifies the type of runner (virtual machine) to run this job on.
    runs-on: ubuntu-latest

    # Define a strategy matrix with different Node.js versions
    strategy:
      matrix:
        node-version: [ 20.x ]  # You can add other versions here if necessary

    # Steps define the sequence of tasks that will be executed as part of the job.
    steps:
      # 1. Checkout the repository to the runner's workspace.
      - uses: actions/checkout@v2
        name: Checkout repository

      # 2. Set up Node.js with the specified version from the matrix (Node.js 20.x).
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # 3. Install dependencies, generate documentation with JSDoc, build the app, and run tests.
      - name: Install dependencies, build, docs and test
        run: |
          # Install dependencies via npm ci (clean install)
          npm ci
          
          # Generate API documentation using JSDoc
          npm run jsdoc
          
          # Build the application (optional, only if a build script exists)
          npm run build --if-present
          
          # Run unit tests
          npm test

      # 5. Set the Git remote URL to use an access token for authentication.
      - name: Authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Set Git Remote URL with Access Token
        run: git remote set-url origin https://x-access-token:${{ secrets.MY_GITHUB_TOKEN }}@github.com/Jamil18474/ci-cd-react


      # 6. Step to increment the version in the package.json file
      - name: Increment version
        run: |
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const versionParts = packageJson.version.split('.').map(Number);
            versionParts[2] += 1; // Increment the patch version
            packageJson.version = versionParts.join('.');
            fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
            console.log('Updated version to:', packageJson.version);
          "

      # 7. Step to commit the changes in the package.json file
      - name: Commit version change
        run: |
          # Configure the email and username for Git
          # This information will be used for the commit
          git config --global user.email "jamil.abdelhamid@ynov.com"
          git config --global user.name "Jamil18474"
          
          # Add the package.json file to the changes to be committed
          git add package.json
          
          # Create a commit with a message describing the change
          git commit -m "ci: increment package version"
          
          
          # Push the changes to the remote repository
          git push
        env:
          # Pass the GitHub token for authentication during the push
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      # 8. Configure git, build, version, and publish the package on NPM.
      - name: Build and publish package on NPM ðŸ“¦
        run: |
          # Configure Git with user information
          git config --global user.email "jamil.abdelhamid@ynov.com"
          git config --global user.name "Jamil18474"
          
          # Build the NPM package
          npm run build-npm
          
          # Increment the version (patch)
          npm version patch
          
          # Publish the package to NPM
          npm publish
        env:
          # NPM authentication token
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # 9. Configure Pages to deploy the built app to GitHub Pages.
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      # 10. Upload build artifacts to GitHub Pages.
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload the entire 'build' directory for deployment.
          path: build
          if-no-files-found: error

      # 11. Upload coverage reports to Codecov for coverage tracking.
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          # CODECOV_TOKEN is a secret stored in GitHub to authorize upload of coverage data.
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Job to deploy the application to GitHub Pages.
  deploy:
    # This job will deploy to the 'github-pages' environment.
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}

    # Defines the type of runner for the deployment job.
    runs-on: ubuntu-latest

    # Grant necessary permissions for deployment.
    permissions:
      pages: write  # Write permission for GitHub Pages.
      id-token: write  # Write permission for ID token.

    # This job depends on the successful completion of the build_test job.
    needs: build_test

    # Steps for the deployment job.
    steps:
      # 1. Deploy the application to GitHub Pages using the deploy-pages action.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
